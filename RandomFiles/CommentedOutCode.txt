Ciphertext Analysis

# corpusTetragrams = {"tion" : 0.31, "nthe" : 0.27, "ther" : 0.24, "that" : 0.21, "ofth" : 0.19, "fthe" : 0.19, "thes" : 0.18, "with" : 0.18, "inth" : 0.17, "atio" : 0.17, "othe" : 0.16, "tthe" : 0.16, "dthe" : 0.15, "ingt" : 0.15, "ethe" : 0.15, "sand" : 0.14, "sthe" : 0.14, "here" : 0.13, "thec" : 0.13, "ment" : 0.12, "them" : 0.12, "rthe" : 0.12, "thep" : 0.11, "from" : 0.10, "this" : 0.10, "ting" : 0.10, "thei" : 0.10, "ngth" : 0.10, "ions" : 0.10, "andt" : 0.10}
# corpusMonogramMagnitude = norm(corpusMonograms)
# corpusTetragramFitness = 0

# # When provided with a text, this function will return a list of monogram frequencies
# def CalculateMonogramFrequencies(inputText):
#     # Splits the text into a list of individual characters
#     textList = [*str(inputText)]

#     # Creates a list that will store the count for each letter
#     frequencyCount = [0] * 26

#     # Loops through each character in the text, and calculates the frequency of each letter
#     for i in range(len(textList)):
#         characterInt = CharacterToInteger(textList[i])
#         frequencyCount[characterInt-1] += 1

#     # Calculates the frequencies of each letter as a number so that the sum of them is 1
#     for i in range(26):
#         frequencyCount[i] = frequencyCount[i] / len(textList)

#     # Returns the monogram frequencies to the program
#     return frequencyCount


# def CalculateTetragramFrequencies(inputText):
#     # Splits the text into a list of individual characters
#     textList = [*inputText]

#     # Creates an empty dictionary with all of the tetragram frequncies
#     frequencyCount = {"tion" : 0, "nthe" : 0, "ther" : 0, "that" : 0, "ofth" : 0, "fthe" : 0, "thes" : 0, "with" : 0, "inth" : 0, "atio" : 0, "othe" : 0, "tthe" : 0, "dthe" : 0, "ingt" : 0, "ethe" : 0, "sand" : 0, "sthe" : 0, "here" : 0, "thec" : 0, "ment" : 0, "them" : 0, "rthe" : 0, "thep" : 0, "from" : 0, "this" : 0, "ting" : 0, "thei" : 0, "ngth" : 0, "ions" : 0, "andt" : 0}

#     # Loops the tetragram detection for each possible tetragram in the text
#     for i in range(len(textList) - 3):
#         # Finds the tetragram at this index
#         tetragram = textList[i] + textList[i+1] + textList[i+2] + textList[i+3]

#         # Checks if it is a common tetragram, and if so adds it into the list
#         if str(tetragram) in frequencyCount:
#             frequencyCount[tetragram] += 1

#     # Places the frequencies into a list, so that they can be accessed by index
#     frequencyList = list(frequencyCount.values())

#     # Calculates the frequency of each tetragram into a percentage     
#     for i in range(30):
#         frequencyList[i] = (frequencyList[i] / (len(textList)-3)) * 100
            
#     # Returns the frequencies as a list, with each index representing the order of the keys in the dictionary of corpusTetragrams
#     return frequencyList

# # Calculates the fitness of the given monogram frequencies
# # Value closer to 1 leads to better fitness
# def CalculateMonogramFitness(inputFrequencies):
#     global corpusMonograms
#     global corpusMonogramMagnitude

#     # Calculates the cosine between the 2 monogram frequencies, giving their fitness
#     fitnessValue = np.dot(inputFrequencies, corpusMonograms)/(norm(inputFrequencies)*corpusMonogramMagnitude)

#     # Returns the monogram fitness
#     return float(fitnessValue)

# # Calculates the fitness of the given tetragram fitnesses
# # Lower negative leads to a better fitness
# def CalculateTetragramFitness(inputFrequencies):
#     global corpusTetragrams

#     # Converts the values of corpus frequencies into a list
#     corpusFrequencies = list(corpusTetragrams.values())

#     # Sets the current tetragram fitness to 0
#     tetragramFitness = 0

#     # Calculate the fitness of each tetragram, and sums them together
#     for i in range(30):
#         tetragramFitness += inputFrequencies[i] * np.log(corpusFrequencies[i])

#     return tetragramFitness


# # Sets up the value for the fitness of english text
# def SetUpEnglishFitness():
#     global corpusTetragrams
#     global corpusTetragramFitness

#     corpusTetragrams = {}

#     with open("CorpusFrequencies\corpusQuadgrams.txt") as f:
#         for line in f:
#             quad, frequency = line.split(",")
#             corpusTetragrams[quad] = float(frequency)

#     corpusList = list(corpusTetragrams.values())

#     for i in range(len(corpusTetragrams)):
#         corpusTetragramFitness += corpusList[i]


#     corpusTetragramFitness = float(corpusTetragramFitness / len(corpusTetragrams))

#     print(corpusTetragramFitness, "english")

# def FindFitness(inputText):
#     global corpusTetragrams
#     global corpusTetragramFitness

#     # Generate all possible four-letter combinations
#     allQuadgrams = [inputText[idx:idx+4] for idx in range(len(inputText)-3)]

#     # Initialize a variable to store the sum of quadgram frequencies
#     totalQuadgramFrequency = 0
    
#     # Iterate over each quadgram in the text
#     for quadgram in allQuadgrams:
#         # Look up the quadgram in the dictionary and add its frequency to the total
#         totalQuadgramFrequency += corpusTetragrams.get(quadgram.upper(), 0)

#     print(totalQuadgramFrequency, "given total")

#     # Calculate the average quadgram frequency and return its absolute value
#     quadgramFitness = abs((totalQuadgramFrequency) / len(allQuadgrams))

#     print(quadgramFitness, "given average abs")
#     print(abs(quadgramFitness - corpusTetragramFitness) / quadgramFitness, "normalised average")


#     return abs(quadgramFitness - corpusTetragramFitness) / quadgramFitness

# SetUpEnglishFitness()

# def AnotherFitnessFunction(inputText):
#     monoFitness = 1 - FindMonogramFitness(inputText)
#     biFitness = 1 - FindBigramFitness(inputText)

#     fitnessValue = (1 - ((monoFitness + biFitness) / 4)) ** 8

#     return fitnessValue